#+OPTIONS:   toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t ':t
#+LANGUAGE: fr
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [12pt,a4paper]
#+LATEX_HEADER: \usepackage{geometry,lmodern,xcolor}
#+LATEX_HEADER: \usepackage[french]{babel}

#+TITLE:     Représentation numérique de l'information : les documents
#+AUTHOR:    Culture numérique

* Introduction : Représenter c'est choisir...

Pourquoi représenter l'information sous format numérique ? En premier
lieu, c'est un changement de support. Par exemple pour un roman, il
faut passer d'un support papier à un support numérique compréhensible
par une machine pour qu'elle puisse le stocker et l'afficher. Il faut
donc représenter le roman comme une suite de 0 et de 1 et inversement
passer de cette suite de 0 et 1 en un texte lisible.

#+BEGIN_QUOTE
  *anim* : Peut être des lettres simples en suite de 0 et de 1, et des
  compositions en mots/composition de suites de 0 et 1...  est-ce
  qu'on fait passer l'idée de coder/décoder et sa contraction en
  codec ?
#+END_QUOTE

Il faut aussi pouvoir échanger. Plutôt que de se prêter un roman sur
support papier, c'est sa représentation numérique qui sera copiée à
travers le réseau. Il est donc nécessaire que l'émetteur et le
récepteur (en l'occurrence les logiciels utilisés par chacun d'eux)
soient d'accord sur la façon de représenter l'ouvrage.

#+BEGIN_QUOTE
  *anim* : Ce serait bien de voir différents choix possibles et un
   accord entre deux protagonistes. Donc l'idée de choix et ensuite
   d'accord entre parties.  
#+END_QUOTE

Retrouver le titre et l'auteur du roman est une tâche qui vous semble
évidente. Elle sera rendue plus facile et sûre pour une machine si la
représentation choisie contient explicitement la désignation du titre
et de l'auteur.

#+BEGIN_QUOTE
  *anim* : ex d'un roman dont le titre est un nom (Harry Potter vs
  J.K. Rolling).
#+END_QUOTE

De même, considérons la classification du roman dans les catégories
policier, historique ou libertin.  Cette tâche est difficile pour une
machine sauf à spécifier dans la représentation la catégorie définie
par un expert humain. Terminons par l'exemple d'une vidéo. En tant
qu'humain, vous reconnaîtrez sans problèmes des personnages connus
dans les images. Ici encore, c'est une tâche très difficile pour une
machine sans une représentation adéquate et des informations
complémentaires. Par conséquent, la représentation numérique d'une
information peut être enrichie pour faciliter les traitements relatifs
à de telles tâches. 

#+BEGIN_QUOTE
  *anim*  Ici on illustre que dans le codage on ajoute des
  meta-données. 
#+END_QUOTE

La numérisation ne se limite pas à un changement de support. En effet,
elle permet des traitements automatiques sur des grandes quantités de
documents. Par exemple[fn:17], un moteur de recherche d'information est
capable de vous renvoyer une liste ordonnée par pertinence de
documents en réponse à une requête. Les choix de représentation
influent sur les traitements possibles.  Par exemple comment faire en
sorte que votre smartphone reconnaisse un morceau de musique chantonné
? Avec une représentation et un codage bien choisis, le morceau
chantonné est codé, ce code est envoyé à un service possédant les
codes d'un très grand nombre de morceaux de musique, le morceau le
plus proche pourra être envoyé vers votre smartphone.


Nous allons dans ce module, présenter les bases de la représentation
numérique de l'information. Ce domaine est vaste. Nous avons fait
le choix de nous restreindre à un message principal : la
représentation numérique d'une information est un processus conçu par
l'homme, reposant sur des choix conceptuels, organisationnels et
scientifiques tout en assurant la possibilité de traitements
numériques.  Divers critères vont gouverner le choix d'une
représentation numérique :
- la pertinence : modélise-t-elle bien l'information et permet-elle de
  réaliser les traitements souhaités ?
- l'économie : est-elle économe en taille pour permettre un stockage
  et des échanges rapides ?
- l'efficacité : les traitements envisagés pourront-ils se faire rapidement ?  
- la sûreté ou la confidentialité : permet-elle de cacher
  l'information ou d'en contrôler les accès ?

Cette liste est non exhaustive.  Les concepteurs, informaticiens en
relation avec des experts métier, vont effectuer les choix de
représentation. C'est un processus créatif complexe car l'espace des
solutions possibles est immense, ce qui explique la très grande
diversité des représentations numériques. 

Un choix de représentation aura un impact important sur les
traitements possibles. Ces[fn:18] traitements sont accessibles à
travers des logiciels et prendre conscience de des choix de
représentation contribue à une compréhension plus profonde et une
utilisation bien plus efficace et réfléchie de ces logiciels. 


Nous allons considérer, dans un premier temps, la représentation
numérique des documents textuels. Le cours devrait vous permettre de
transposer les notions présentées dans d'autres domaines. En
particulier, à la fin du cours, les questions liées à la parole,
l'image et la vidéo seront esquissées pour vous guider dans le monde
numérique multimédia[fn:19].

#+BEGIN_QUOTE
*Activité* Représenter et normaliser est une tache complexe :
l'exemple de HTML. Poser des questions sur le W3C pour montrer qu'il
implique un grand nombre de groupes et de participants, qu'ils
travaillent depuis plus de vingt ans, qu'il y a des versions
successives de html et de css.
#+END_QUOTE

#+BEGIN_QUOTE
*Activité* Faire réfléchir sur les évolutions récentes de html ? Web des
données, knowledge graph, réseaux sociaux ?
#+END_QUOTE

* Analyse d'un document : plusieurs vues complémentaires
** intro
Dans cette section, nous analysons ce qu'est un document textuel pour
déterminer les critères amenant à une bonne représentation numérique.
Le cours sur le Web a déjà introduit un exemple de représentation
numérique de document dont une caractéristique essentielle est de
représenter contenu et structure d'un côté dans le langage HTML et
présentation d'un autre côté avec une feuille de style CSS. Cette
représentation facilite les traitements et la transmission à travers
les réseaux et permet l'affichage sur tout type d'écran. Cette
distinction entre structure, contenu et présentation est plus générale
et résulte de l'analyse de ce qu'est un document textuel.

L'analyse des documents textuels met en évidence *quatre vues
complémentaires* : les vues séquentielle, structurée, qualifiée et de
présentation.

** Le contenu, une vue séquentielle

Le premier constat évident est qu'un document est une suite de
symboles. C'est la *vue séquentielle* du document.  L'ordre est
important et le parcours naturel est de commencer par le début, passer
d'un symbole au symbole suivant jusqu'à la fin.

Grâce à cette organisation séquentielle, il est déjà possible
d'imaginer des traitements : rechercher, remplacer, couper, copier,
coller, identifier des mots et pourquoi pas en vérifier l'orthographe,
...

#+BEGIN_QUOTE
*activités* : 
- éditeur de texte: lancer un éditeur de texte et en faire une copie
  d'écran à déposer sur moodle.
- éditeur de texte: la notion de paragraphe définie par la fin de
  ligne 8-). Montrer que la ligne (vue à l'écran) n'est pas un élément
  de structure en faisant varier la taille de la fenêtre éditeur. Le
  mot et les ponctuations ?
- Quelles fonctionnalités prend il en charge : (cocher)
  - copier/couper/coller
  - rechercher et remplacer
  - avancer de mots en mots
  - corriger l'orthographe
  - mettre en gras
#+END_QUOTE

** La structure, une vue arborescente

Les mots, phrases et paragraphes définissent une première
structuration du document. Cependant, tout document textuel contient
des niveaux plus abstraits de structuration : un livre
contient une page de titre, une page de garde, une préface, des
chapitres ; un rapport contient un titre, un résumé, une introduction,
des sections et sous-sections, des listes, etc... C'est la
vue *structurée*. Elle est souvent hiérarchique ou arborescente car il
y a des relations d'inclusion : un paragraphe dans une sous-section
dans une section dans le document.

#+BEGIN_QUOTE
*anim* illustrer hiérarchie et arbre
#+END_QUOTE

Grâce à cette organisation structurelle, de nouveaux traitements sont
disponibles : extraire le résumé, numéroter les sections, construire
une table des matières, réordonner des sections avec mise à jour de la
table des matières, ...

#+BEGIN_QUOTE
*activité* : 
- ouvrir un document dans un traitement de textes,
- ouvrir le mode plan ou le navigateur de section
- rendre une capture d'écran de ce plan

*activité* : 
- à l'aide de firefox, rendez-vous sur la page
  http://culture-numerique.univ-lille3.fr...
- pressez les touches CTRL-MAJ-C. La fenêtre de l'inspecteur de code
  =html= s'ouvre. 
- observez la structure du document =html=. Utilisez les petites
  flèches pour découvrir ou cacher les parties de code =html=
  incluses les unes dans les autres.
- retrouvez la ligne de code correspondant au texte ...
- Recopiez la dans la zone de réponse à ce quizz.

*activité* : à discuter. Montrer que une organisation hiérarchique se
retrouve souvent. Montrer la structure d'un livre avec un docbook
simplifié. Montrer la structure d'une BD xml de gestion d'une
bibliothèque.
#+END_QUOTE

** Les méta-donnnées, une vue qualifiée

Une troisième vue découle des besoins lorsqu'on manipule des
documents : un utilisateur peut souhaiter retrouver la date de
création d'un document, un bibliothécaire cherche des
documents par auteur, par titre, par mot-clef, par édition et numéro
d'édition, ou encore par date. Ces éléments ne figurent pas
nécessairement dans le document mais ils le qualifient. Ce sont des
méta-informations (ou méta-données), c'est-à-dire des informations à
propos des informations. Elles forment la *vue qualifiée* du
document. Très souvent ces informations sont mémorisées sous la forme
de propriétés (ou attributs) ayant une valeur.  Par exemple /La
propriété titre de ce document vaut "Culture numérique"/, /La propriété
datecréation de ce document vaut "10 septembre 2015"/, etc...

#+BEGIN_QUOTE
 *anim* je verrais bien en anim des docs papier qu'on range dans une
pochette avec les meta données qu'on écrit sur la pochette.
#+END_QUOTE

Grâce à cette vue qualifiée et ces méta-données, les traitements sur
des ensembles de documents sont facilités : on peut classer par
auteur, rechercher par titre, ordonner des versions par date,
... 

#+BEGIN_QUOTE
*activité* : Dans le traitement de texte, regarder les propriétés du
document donné en annexes. Quel est le titre, les mots clef et le
résumé ? Faites une capture d'écran de la fenêtre où vous avez trouvé
ces meta-données. 
#+END_QUOTE
#+BEGIN_QUOTE
*activité* : on peut même dans certains cas résumer un document
textuel à ses méta-données. Prendre l'exemple de la recherche sur la
BU Lille 3[fn:9]. Montrer les méta-données dans la notice d'un
livre. Montrer que les recherches dans le fonds de la bibliothèque
sont faites sur ces notices (et pas dans les textes) : faire des
requêtes par titre, par date, par mot-clé, trier. 
#+END_QUOTE

** La présentation, une vue pas uniquement graphique

Enfin, les choix du dessin de chaque caractère, de leur taille, de la
couleur du titre, de la taille des marges, etc.
participent à *la présentation ou forme* du document. Cette forme va
s'appliquer au contenu en s'aidant de la structure mais il est
important de bien distinguer la /présentation/ et le
/contenu structuré/. En effet, comme vous l'avez vu dans le
cours sur le Web, la séparation entre contenu et structure dans un
fichier html et présentation dans une feuille de style css permet
d'afficher un même contenu avec différentes formes mais aussi de
faciliter certains traitements. 
Enfin, soyez vigilants car les
traitements de textes entretiennent la confusion entre contenu,
structure et forme. Or, un document mis en forme *n'est pas* un document
structuré. Les interfaces proposées qui semblent très intuitives
entraînent souvent de mauvais apprentissages et
de mauvais usages.

Cette vue de présentation est néanmoins très importante pour des
questions de communication et de diffusion car il faut toujours
adapter la forme à la fonction du document. La forme d'un document
pour impression et lecture diffère de la forme d'un document pour
affichage sur écran. La forme peut dépendre de l'objectif de
communication visé.

#+BEGIN_QUOTE
 *activités* : on peut remettre une couche html et css. On peut montrer
des documents du Web sous différentes formes. On peut montrer un
document Latex et faire découvrir sa structure, puis montrer le pdf
correspondant. On peut ajouter twocolumn et montrer le résultat. La
même chose avec document OpenOffice et deux styles (cf après mais par
expérience ce n'est pas facile)

 *activité* : une activité qui montre que forme n'est pas structure. 
- fournir 2 fichiers .odt identiques dans la forme, l'un mis en forme
  avec le formatage direct (représentation séquentielle) sans aucune
  structure ni description, l'autre à l'aide de styles (représentation
  structurée).
- faire chercher le nombre de mots, de car, un mot particulier,
  rech/rempl dans les 2 docs: résultat et facilité identique 
- faire chercher, le nom de l'auteur, l'adresse de l'auteur, le titre,
  la date de création,  les mots clés, le résumé, l'un des 2 avec des
  métadonnées renseignées  l'autre pas 
- passer en mode navigation, demander de modifier la structure (par ex
  des niveaux)
- générer une TDM
- changer le style de tous les parag (taille de typo par ex)
#+END_QUOTE

** Un point d'étape 

#+BEGIN_QUOTE
*anim* Peut-être une anim de rappel
1. *Le contenu brut* : la suite de caractères
2. *La structure* : identification des paragraphes, des titres, des
   sections, etc... et identification de l'organisation de ces
   éléments.
3. *La présentation* : l'apparence graphique.
4. *Les méta-données* : informations à propos du document, non
   nécessairement affichées ou imprimées mais utiles pour sa gestion,
   son traitement.
#+END_QUOTE

Chacune des vues contenu, structure, qualifiée et de présentation est
importante.  Elles contribuent toutes, à des degrés divers, à des
objectifs complémentaires : l'intelligibilité est essentiellement
portée par le contenu et la structure ; la lisibilité est
majoritairement une affaire de présentation ; la capacité à être
efficacement traité par une machine repose sur le contenu, la
structure  et les
méta-données.

* Documents numériques - formats et normes

Chacune des vues va contribuer à la représentation numérique d'un
document textuel, mais, selon le domaine d'application, elle sera plus
ou moins importante ou nécessaire. La première question est : *que
veut-on représenter en vue de quels usages ?* Des choix techniques
seront associés pour répondre à la question : *comment représenter ?*
Cette distinction entre le quoi et le comment est, en informatique
comme dans beaucoup d'autres sciences, une approche essentielle des
problèmes.

** Différents formats pour différents usages

Ces choix donnent lieu à un format de représentation. Vous connaissez
sans doute certains de ces formats précisés avec les abréviations
suivantes :

- le format =txt= pour les textes,
- le format =doc= ou le format  =docx= du traitement de textes Word,
- le format =odt= du traitement de textes libreoffice,
- le format =pdf= pour l'impression,
- le format =html= pour les hypertextes.

Vous noterez, que pour de mêmes usages, comme la composition de
documents textuels, il existe des formats différents comme =doc= et
=odt=. Vous noterez également que les formats évoluent avec les usages
et les technologies. Par exemple =html= a été défini dans des versions
successives depuis le début des années 90 jusque =html5=, paru en 2014.


** Formats et logiciels

Nous avons expliqué la relation forte entre le choix de la
représentation et les traitements qui peuvent être faits sur une
donnée numérique. D'un point de vue très concret, cette relation se
traduit souvent par la liaison entre un format et une application
spécifique d'un éditeur logiciel. Par exemple, un document textuel au
format =doc= est associé au logiciel Word de Microsoft. Il aura
souvent été créé avec ce logiciel et pourra être lu et modifié avec ce
logiciel. 

Un document dans un format pourra être stocké dans un
fichier. Pour des raisons historiques, le format d'un document est
souvent précisé dans l'extension du nom de fichier constituée de trois
ou quatre lettres après le point. On désigne même abusivement un
format par cette extension, comme nous l'avons fait précédemment en
parlant de format =doc= par exemple. Cette extension peut être vue
comme une méta-donnée qui dit : "ce document dans ce fichier respecte
le format de représentation de documents utilisé par le logiciel =Word=".

Si nous avons un document textuel au format =odt=, il ne
suffit pas de le renommer avec l'extension =doc= pour le rendre
lisible par Word. Il faut réaliser une conversion d'un format dans
l'autre, opération qui peut être difficile voire impossible. Pourquoi
? Pour au moins deux raisons

1. Les choix qui ont été opérés pour définir les formats ne sont pas
   toujours compatibles.  On peut donc perdre des informations lors de
   cette conversion.
2. Les choix ne sont pas toujours publics. On ne peut donc pas écrire
   de programme de conversion.

Mais un document textuel dans un format peut être parfois manipulé
avec des logiciels différents pour des besoins différents.  Par
exemple, un fichier =html= peut être ouvert par un navigateur pour le
visualiser.  Le même fichier peut être ouvert avec un éditeur de texte
pour le modifier. Comme vous l'avez vu dans le cours du Web, il sera
également manipulé par les robots des moteurs de recherche qui
contribuent à indexer le web.

# ** Formats, fichiers et extensions


# Une erreur courante est de croire qu'on peut changer le format d'un
# fichier simplement en le renommant. Par exemple il est possible et
# très facile de renommer un fichier =toto.pdf= en =toto.odt=, mais cela
# ne modifiera en rien le format du fichier et son contenu : =toto.odt=
# sera toujours un fichier au format =pdf=. Pour prendre une image, cela
# reviendrait à mettre un =camembert= dans une boite de =vache qui rit=,
# l'étiquette sur la boite donne alors des informations fausses sur son
# contenu.


# #+BEGIN_QUOTE
# *activité* : plein de questions tordues ! envoi sur le réseau (texte
# ci-après), cohérence entre extension et format, méta-données linux,
# commande file en linux, ... 

# *activité* : fichier html ouvert avec éditeur et navigateur, fichier
# pdf ouvert avec editeur, libreoffice, lecteur de pdf ; fichier texte
# avec un peu de mise en forme, sauvegarder en txt, odt et doc puis
# ouvrir avec éditeur de texte, libreoffice, word, ...
# #+END_QUOTE


** Ouvert ou propriétaire

Le processus de choix de représentation et de définition d'un format
est complexe et coûteux. Il peut être aussi stratégique
d'un point de vue industriel ou commercial. Dès lors, les créateurs
ont la possibilité de le rendre disponible pour tous librement ou non,
de le cacher ou de le protéger par des brevets.

On parle de *format ouvert* si le format est diffusé publiquement. Par
exemple, vous pouvez accéder librement sur le Web à la définition du
format =html5=.  De plus, aucune entrave légale n'accompagne
l'utilisation d'un format ouvert et de ce fait, un format ouvert n'est
pas lié à un logiciel. En effet, plusieurs logiciels différents
peuvent librement lire ou écrire les informations représentées dans ce
format. On facilite ainsi l'interopérabilité. Par exemple, le format
=html= est utilisé par de nombreux logiciels et même au delà du Web. 

On parle de *format fermé* ou propriétaire lorsque des restrictions
d'accès et/ou d'utilisation s'appliquent. Être propriétaire d'un
format très répandu donne une puissance économique très importante
dans notre monde numérique et une position dominante. En effet, la
conversion étant impossible, une mise en concurrence est rendue très
improbable et les utilisateurs sont alors contraints d'utiliser le
logiciel associé. Si =html= avait été un format fermé, sans doute le
web serait-il très différent de celui d'aujourd'hui ou n'existerait
peut-être même pas. 

# La problématique des formats ouverts et propriétaires est en réalité
# complexe car liée à des questions d'utilisation, de portabilité, de
# logiciel et à des aspects juridiques. Vous pourrez approfondir quelques
# notions dans les activités associées à ce cours.

#+BEGIN_QUOTE
*activité* Lire les pages wikipedia de doc et pdf constitue une belle
activité qui reprennent des notions du cours
- page wikipedia sur docx et pseudo ouverture
- Différents objectifs portabilité etc..
- Différents traitements et différents logiciels  lecture/ecriture du pdf
- propriétaire et ouvert
- normes et pas de norme
- extension et format (doc désigne plein de formats) 
#+END_QUOTE

** Une minute citoyenne ici ?

- Promotion des formats libres dans l'administration (circulaire Ayrault)
- Pourquoi de l'interopérabilité
- Les conséquences de formats proprios? 

* Documents numériques textuels

Nous avons analysé ce qu'est un document textuel : le *quoi*. Nous
avons mis en évidence les quatre vues de contenu, de structure, de
forme et qualifiée. Nous avons discuté des formats de document. Nous
allons maintenant étudier le *comment*, c'est-à-dire étudier sur
différents exemples comment peuvent être définis des documents
numériques textuels. Nous allons voir deux approches : l'une dans
laquelle on décrit les différentes vues sur le document dans un texte
structuré, l'autre qui repose sur une approche plus proche du rendu
souhaité. Auparavant, nous traitons la question du codage des
caractères.

** Représentation numérique des caractères

Un document textuel est construit avec des caractères et une séquence
 de caractères correspond souvent à un texte intelligible par l'homme.
 Nous présentons donc, dans un premier temps, comment sont représentés
 en machine les *caractères*.

Précisons d'abord la notion de caractère en prenant l'exemple de la langue française. Les caractères sont les minuscules, les majuscules, les lettres accentuées, les chiffres, l'espace et les symboles de ponctuation.  On peut aussi considérer des caractères comme le caractère "e dans l'o" ou les symboles monétaires... 

Mais avec l'internationalisation et la numérisation de textes anciens, il faut être également capable de représenter tous les caractères de toutes les langues, vivantes ou mortes.  

Ce travail d'inventaire est long et complexe. Fort heureusement, il existe des groupes internationaux qui ont pour mission d'établir des normes pour la représentation numérique des caractères. C'est le cas du le consortium international *Unicode* fondé il y a plus de 20 ans. Il définit en premier lieu le *quoi*, c'est-à-dire quels caractères ou symboles faut-il coder. À l'heure actuelle, la plupart des caractères et symboles de la très grande majorité des langues sont codés. Mais le consortium introduit régulièrement des nouvelles langues rares ou anciennes ou même des langages comme les Emoji. 

Dans ces normes comme Unicode, ce ne sont pas les dessins qui sont répertoriés mais les caractères eux-même. Cette distinction est parfois assez subtile : majuscules et minuscules sont des caractères différents mais un *a* minuscule en gras ou italique en écriture attachée ou en script est toujours le même caractère. À ces caractères, s'ajoutent des caractères particuliers, dits caractères de contrôle souvent invisibles. C'est par exemple, le caractère qui signifie la fin d'un fichier texte. D'autres proviennent même de l'époque des machines à écrire comme la tabulation, le retour à la ligne ou même le /retour chariot/ qui permettait à la tête d'écriture de revenir en début de ligne. 


Le consortium unicode définit en second lieu le *comment*. Il s'agit d'associer à tout
caractère pris en charge par Unicode, un nom et un numéro entier point
de codage.  Par exemple, A a pour nom "Latin Capital Letter A" et
pour numéro 65, * a pour nom "Asterisk" et pour numéro 42. Ces choix
ont une histoire et ont été faits de façon astucieuse pour faciliter
certains traitements. Par exemple, pour passer d'une lettre majuscule
de notre alphabet à la lettre minuscule correspondante, il suffit
d'ajouter 32 à leur numéro. Avec Unicode, tout caractère a donc un
numéro, il reste à préciser comment ce numéro entier est représenté
comme une suite de 0 et de 1. Il existe différents codages, le plus
répandu et le plus économe en place  est =UTF-8=.

#+BEGIN_QUOTE
*anim* bien montrer le double encodage : car vers nombre vers
binaire. On peut le faire avec des caractères divers français, arabe,
chinois, et même Emoji.
#+END_QUOTE

#+BEGIN_QUOTE
*Activité* Représenter et normaliser est une tache complexe :
l'exemple du codage des caractères. Le site montre bien le qui est
dans le consortium et que c'est une structure complexe mais organisée
qui gère tout cela. A des relations avec W3C et ISO.

*Activité* Montrer la ligne avec codage des caractères dans une source
html. Sur le Web, 85% des docts sont en UTF-8

*Activité* Trouver le point de codage de caractères
français, et de caractères de différentes langues.  

*Activité* Les codages ont évolué au cours du temps. Une activité
autour de ASCII et Latin1 ?

*Activité* Les codages sont nombreux. Vous avez déja vu des problèmes
d'affichage dans des mails ou des pages web, ils sont souvent dus à
des erreurs de codage. Montrer des exemples ?

*Activité* envoyer sur des documents décrivant UTF8 et UTF16 et poser
des questions sur ces codages. *avancée* on peut faire réfléchir au
décodage et demander un algorithme de décodage d'un texte en UTF 16,
puis en UTF8
#+END_QUOTE

** Textes "simples"

Un document textuel peut être réduit à la seule vue séquentielle, c'est-à-dire une simple
séquence de caractères. Dans ce cas, le format de représentation privilégié est celui communément appelé  *texte simple*, dont l'extension principale est =txt= et le logiciel principal pour le manipuler est un *éditeur de textes*. Pour l'utilisateur, il existe cependant un niveau implicite de structure :

- un *mot* est une suite de caractères séparés par des espaces ou des
  caractères de ponctuation ;
- une *phrase* est une suite de mots dont le premier commence par une
  lettre capitale et qui se termine par un point ;
- un *paragraphe* est une suite de mots séparés par des fins de
  paragraphes.

Ce niveau de structure n'est pas explicitement représenté. Par exemple, il n'existe pas de codage de la notion de fin de mot. La notion de mot est le résultat d'un traitement par la machine dépendant des choix des concepteurs des logiciels qui peuvent reposer sur la langue, de la définition des symboles de ponctuation. Elle est même différente de la notion de mot en linguistique si vous pensez à des mots comme aujourd'hui, pense-bête, pomme de terre. Le même constat est fait pour la phrase et le paragraphe. Par exemple, dans les éditeurs de texte, la fin de paragraphe est souvent représentée par deux retours à la ligne consécutifs formant alors une ligne blanche. 

#+BEGIN_QUOTE
*Activité* Activité ou demo sur éditeur de textes et ses fonctionnalités

*Activité* Méta-données sur textes simples. Notez que le compte de
mots est souvent différent selon le logiciel (gedit vs linux)

*Activité* Montrer que la ligne d'affichage n'est pas un élément de
structure. Par contre, la ligne ou paragraphe correspondant à un appui
sur touche Entrée en est un.

#+END_QUOTE

** Des langages et des logiciels

Alors comment définir cette structure de façon explicite ? L'interaction, par le biais d'un langage commun entre l'homme et la machine joue alors un rôle essentiel. Ce langage d'interaction peut se traduire par un texte écrit et formel qui décrit un document comme par exemple le =html= dont nous avons déjà parlé.  Mais, ce langage peut prendre la forme d'une suite d'actions dans un logiciel de traitement de textes. Étudions ces deux options un peu plus en détail.   

** Textes structurés pour décrire des documents textuels

Pour définir un document textuel, on peut décrire les différentes vues sur ce document. On parle alors de composition de document en mode *WYSIWYM* pour "What You See Is What You Mean". Pour cela, on va décrire le document par un texte dans un langage de description.  Dans ce langage certains caractères ou certaines suites de caractères ont un sens particulier. Les éditeurs de texte servent à écrire directement dans le langage de description, et des logiciels spécifiques sont ensuite utilisés pour *calculer* le document à partir de sa description. 

- *Les langages Wiki* ont été utilisés principalement pour composer
  des pages Web dans un langage simplifié. On utilise des conventions
  comme : une ligne qui commence par * est un titre, ** pour un
  sous-titre. Une ligne blanche sépare les paragraphes. Un programme
  de calcul peut construire une page Web à partir d'une description
  textuelle en langage Wiki.
- *Le langage LateX* utilisé pour la composition de documents
  (articles, rapports, thèses, livres) dans le monde
  scientifique. Dans ce langage, le texte structuré décrit le contenu
  et la structure avec, par exemple, une section commence par la
  séquence de caractères =\section{titredesection}=. La forme est
  définie par les règles externes de l'édition scientifique. Un
  programme de calcul prend en entrée le document texte décrivant le
  document et produit en sortie un document lisible et imprimable au
  format =pdf= respectant ces règles d'édition.
- *Le langage html* utilise des caractères particuliers comme <, > et
  / pour définir des balises. Par exemple, les balises =<section>= et
  =</section>= permettent de définir une section. Le corps du document
  =html= contient le contenu et la structure. L'entête du document
  contient des méta données comme le codage des caractères utilisé par
  le navigateur pour un affichage correct de la page, mais aussi des
  mots clés à destination des robots pour une bonne indexation du
  document. Enfin, la forme est définie dans un fichier texte
  structuré (une feuille de style) dans *le langage css*.


#+BEGIN_QUOTE

*Activité* éditeur de texte et org. Coloration
syntaxique. Comprendre. Voir dans navigateur.

*Activité* éditeur de texte et LateX. Coloration
syntaxique. Comprendre et montrer le pdf correspondant. On peut
montrer un site LateX en ligne.

*Activité* on peut refaire html et css. Par exemple sur html montrer
corps et entête. Montrer les méta-données de l'entête.

*Activité* on doit respecter certaines règles typographiques lorsqu'on
décrit un document. Cf document Marc.
#+END_QUOTE

** Traitement de textes

Quand l'interaction se traduit par une suite d'actions dans un logiciel, on parle alors de composition *WYSIWYG* pour "What You See Is What You Get". Dans ce mode de composition, vos actions définissant la structure, le contenu ou la présentation sont immédiatement interprétées par le logiciel. Vous voyez donc à l'écran une image presque fidèle du document imprimé final.   Les logiciels de *traitements de textes*  comme =Word= ou =LibreOffice Writer= ou même certains éditeurs de contenu Web fonctionnent selon ce principe. 

Le mode WYSIWYG est très facile d'accès car vous échappez à l'apprentissage contraignant d'un langage de description très formel. Mais vous ne devez pas oublier que l'interaction avec le logiciel repose toujours sur les vues structure, contenu, forme et méta-données lorsque vous composez un document textuel. En effet, si vous les respectez, vous aurez alors facilement accès aux fonctionnalités de haut niveau des traitements de texte : la génération automatique de table des matières, de bibliographie, d'index ; la réorganisation des sections ; la modification de la présentation dans tout votre document ; ...

L'apprentissage de cette interaction est alors d'apprendre le sens de certaines actions. Vous apprendrez par exemple que le rôle de la touche *entrée* est d'indiquer une fin de paragraphe ; que la déclaration des sections se fait en cliquant sur le texte du titre puis dans une liste pour sélectionner le niveau de titre etc. 


*** Comment procéder ?

Une dernière caractéristique commune aux langages de description et aux traitements de texte est qu'ils sont extensibles et permettent de s'adapter à des domaines spécifiques. Par exemple, la structure d'un manuel scolaire peut comprendre la notion d'exercice, d'activité, de leçon etc. Être capable de traduire dans la composition de documents chacun de ces éléments structurels est une plus-value  qui permet des traitements adaptés, que ce soit dans la présentation ou l'interrogation. Donc une démarche d'analyse préalable à la création d'un document s'avère nécessaire. 

Réaliser cette analyse, c'est comprendre qu'un document a des objectifs, qu'il doit parfois respecter des règles liées à ses objectifs. Vous devez avoir réfléchi à ces objectifs, au
contenu et à la structure la mieux adaptée. La démarche de composition d'un document suivra, en général, l'ordre suivant :

1. Saisir le contenu textuel ou importer ce contenu textuel. Votre
   texte doit respecter les règles de typographie de la langue du
   document. Votre texte doit être structuré en paragraphes.
2. Effectuer les déclarations de structure : sections et titres de
   sections, listes, ... Ces déclarations sont faites à l'aide de
   styles (par exemple titre de niveau 1). L'emploi du mot style est
   regrettable car il entraîne des confusions.
3. Effectuer les choix de présentation basés sur la structure. Par
   exemple, vous préciserez que le style titre de niveau 1 sera
   présenté en gras, police Times, 14 pt, avec un retrait à droite de
   1cm et un espacement avant de 0.5cm et un espacement après de 0.2
   cm.

Dans la pratique, il peut être intéressant de réutiliser une mise en
forme pour plusieurs documents. Par exemple, tous les rapports d'une
même entreprise respectent la même présentation. Pour cela, on utilise
la notion de *modèle de document*.

Enfin, la plupart des méta-données comme auteur, date de création,
date de dernière modification sont ajoutées automatiquement par
l'outil s'il a été correctement paramétré au préalable mais vous
pouvez ajouter explicitement des méta-données.

*** Erreurs communes
Les modes WYSIWYG induisent souvent de mauvaises
pratiques. En effet, un utilisateur a souvent tendance à se laisser
guider par le rendu sur l'écran en oubliant que 

- les règles typographiques utilisées par le logiciel vont venir
  modifier ce rendu. Par exemple, c'est le logiciel qui va calculer la
  largeur d'une espace[fn:14].
- des modifications ultérieures de contenu vont changer la mise en
  page. Par exemple, l'ajout d'un paragraphe peut changer toute la
  mise en page du document complet.

Nous vous donnons donc les conseils suivants :

1. *Respecter les règles de typographie, en particulier de ponctuation*
2. *Ne pas aligner/décaler des parties de textes avec des espaces*
3. *Ne pas mettre en page en créant des paragraphes vides*



#+BEGIN_QUOTE

*activité* installer grammalecte sur son LO et jouer avec, on peut
donner un texte avec plein d'erreurs et demander combien ont été
corrigées par l'outil (typo, grammaire, conjugaison, style).

*Activité* Marc a un texte sur la typographie

#+END_QUOTE

* Footnotes

[fn:19] En fait j'aurais bien aimé faire passer le naturel et
l'artificiel. En gros numérisation d'un signal vs numérisation d'une
représentation mentale. Compréhensible sur l'image (matricielle /
vectorielle). Comprendre si dans un caractère on parle de l'image, le
dessin, ou de l'idée de caractère... Je pense que c'est un truc
fondamental qu'on n'explique pas.

[fn:18] Un peu fort cette relation. Pas tout à fait exact. J'ai
remplacé le texte initial:  Un choix de représentation
aura un impact important sur les traitements possibles mais aussi sur
son utilisation dans la société.   Des logiciels sont créés sur un choix
de représentation pour implanter les traitements sur cette
représentation. Vous serez amenés à choisir un logiciel et donc une
représentation associée. Un logiciel étant choisi, vous devrez
bien comprendre la représentation choisie pour être un utilisateur
averti du logiciel.


[fn:17] Intérêt de cet exemple par rapport au suivant ? Choisir entre
ces 2 exemples.

[fn:9] Pas trop convaincu par la BU...

[fn:8] Pas trop compris ce qu'on veut faire ici

[fn:7] J'ai pas compris.

[fn:6] On prend un peu d'avance sur le cours dans cette activité.

[fn:5] Je tique un peu sur le très limité... Aujourd'hui on peut
penser qu'on peut résoudre la tâche de discerner Harry Potter de
J.K. Rolling. Présenter comme "rendre les tâches plus simples pour la
machine" me semble être plus juste.

[fn:4] Je ne suis pas trop d'accord avec les modifications. On a perdu
des messages: 1/ un document mis en forme *n'est pas* un document
structuré. 2/ La ligne n'est pas un élément structurel. 3/
Contrairement à ce qui est écrit je crois que la présentation peut
enrichir les traitements. Rémi : réponse à 1 : je ne vois pas ou on
dit qu'un document mis en forme est structuré + activité avec odt sur
laquelle je suis sceptique (montrer ce qu'il ne faut pas faire) ;
réponse à 2 : vu dans activités avant, on ne parle pas de ligne comme
élément de structure et on y revient dans la dernière section ;
réponse à 3 : je n'ai pas trouvé de traitement générique utilisant la
représentation même si on peut traiter en utilisant la forme (la css
par exmple).


[fn:1] On devrait mettre en évidence qu'on doit préparer la
représentation pour effectuer des traitements et que cela conditionne
les choix de représentation. Ici on tient un autre discours que je ne
perçois pas bien. 

[fn:2] J'ai repris le même exemple mais je le trouve bien
compliqué. Le plus simple était quand même de dire que par exemple, on
peut facilement classer par auteur ou par genre si on a représenté ces infos.

[fn:3] Je ne trouve pas trop clair... Le contraignant et la marge de
manoeuvre.. Je reformule une proposition alternative

[fn:10] al1: est-ce plus clair ou au contraire plus compliqué ? MT:
Pas sûr d'avoir compris. 

[fn:11] al1: je propose de retirer cette phrase : aucune entrave
légale sauf licence, ... trop de choses derrière pas d'intérêt si
juste cette phrase.

[fn:12] al1: pas sûr de vouloir garder ça, LO compte 5 mots sur un
fichier contenant : pomme de terre, pense-bête, aujourd'hui et moi
aussi, ...

[fn:13] al1: fichier csv, je mettrai ça en activité, c'est vachement
bien mais un peu décalé je trouve là où on en est. Il faut percuté
sur ce qu'est un jeu de données, ...

[fn:14] al1: en typo le mot espace est féminin, on le précise ici ?

[fn:15] al1: la notion d'éditeur de texte est complexe, même après
nos explications, si on en parle je crois qu'il faut une activité qui
permette en amont de différencier éditeur et traitement de texte. 

[fn:16] al1: j'ai peur que ça devienne confu en section html et
begin{section} en Latex, ça ne dit rien de plus je propose qu'on
enlève LateX au profit d'une activité qui était prévue d'ailleurs
on peut utiliser https://www.overleafcom.



